 # 讲一下什么是关键字参数
 # 关键字参数：什么是关键字参数, 形式是以: key=value

def add(a, b=10): # 关键字参数, 此时b就是关键字参数, 形式是key=value
    result = a + b
    print(result)

# 调用: 
add(5) # 没有报错, 15
# 也可以覆盖原来的关键字参数的数值
add(4,20) # a=4, b=20 # 此时7就会覆盖b原来的默认值

# 所以关键字参数的特点是:
# 在给定参数的同时, 关键字参数是默认给好的(在函数定义时), 但是你也可以通过传参的方式修改它

# 关键字变量可以有多个
def add1(a, b=10, c=4):
    print(a, b, c)
    result = a + b + c
    print(result)

# 调用
add1(1) # 必须给不可变参数传值 # 15

add1(1, 5) # 给b=5 打印的是 10

# 如何不给b赋值, 而给c赋值呢
add(1, 4) # 这个默认会将4赋值给b
# 那么如何单独赋值给c呢
# 赋值时明确指明给谁赋值, 形式: key = value
add1(1,c=8) # 此时就将8赋值给c # 19

# 我们想想可变参数: 
# 那么关键字参数有没有可变参数呢
# 这就称为关键字可变参数, 也就是说格式为key=value, 并且可以传入多个参数
# 例子:
def func(**kwargs): # key word argument, 这种参数称为关键字参数
    print(kwargs) # 自动转转换为字典

# 调用:
func(a=1, b=2, c=3) # {'a': 1, 'b': 2, 'c': 3}
# 关键字传参的格式必须是key=value
# fun(1, 2, 3) # 这种调用格式就是错误的
# 那么底层是如何去做的呢, 底层会默认给你准备一个字典, 当你把多个参数传入的时候, 他就会按照key=value这种键值对的方式,存放在字典中.
# 所以系统底层是默认给你转换成为字典了

"""
当参数列表: 
有1颗*时候, 系统会给你准本元组装你的散列的值
有2颗*时候, 系统会给你准备一个字典, 此时你放入 实参的时候, 必须也是一对一对放入
# 而只有关键字参数的格式: key=value时, 满足**的dict格式, 所以[关键字可变参数]适用于**的情况

func() # 没有元素

fun(a=1) # {'a':1}

func(a=1, b=2) # {'a':1, 'b':2}

"""
# 那么我们想要传入字典要如何呢
dict1 = {'001': 'python', '002': 'java', '003': 'c语言', '004': 'go语言'}
# func(dict1) #  TypeError: func() takes 0 positional arguments but 1 was given
# 显然不能直接将dict直接传入函数中, 因为不是key=value关键字参数的, 所以就报错了
# 正确格式是**dict, 因为这个时候**dict就是关键字参数的形式了, 然后传入到函数中即可
func(**dict1) # 正确

# 在形参**kwargs(可变关键字参数)时, 如果想传入一个dict, 是不可以直接传入的
# func(dict) 和 func(key)都是一样的, 都是一个参数, 不是键值对参数的
# 那么字典如何传入呢: 可以func(**dict1) # 那么字典前面**, 系统自动拆包, 变为key=value的形式
# 将字典拆包成关键字参数的形式, 那么就可以传入进关键字可变参数的函数, 然后系统内部自动装包, 不带**的就是dict了
# 此时这样就可以将字典赋值给带有关键字可变参数的函数了.

# 学完了上面的方法, 我们来看这样一个案例
students = {'001': ('蔡徐坤', 21), '002': ('王源', 19), '003': ('王俊凯', 20), '004': ('易烊千玺', 19)}

# 写一个遍历所有元素,并且打印的函数

def print_stu(name, **dict_arg):
    print("这是{}函数".format(name))
    if isinstance(dict_arg, dict):
        for name, age in dict_arg.values():
            print(f"{name}的年龄是{age}")

# 调用
print_stu("1", **students) # 执行成功

def func(a, b=3, c=3, **kwargs): #此时kwarfs就成为可变关键字参数
    print(a, b, c, kwargs)

"""
综上: 总结一下:
练习:
1.
def func(a, *args): # 此时args就成为是可变参数
    print(a, args)
# 此时调用func()中, args就是元组, 而*args就是散列的数据
调用:
func(2,3,4,5) # a=2 agrs=(3,4,5)
func(1, [3,4,5]) # 1 ([3, 4, 5], )
func(1, 2, 3, [3,4,5]) # 1 (2, 3, [3, 4, 5])
func(1,2,[3,4,5,6],7)  # 1 (2, [3, 4, 5, 6], 7)

2.
def func(a, b=3, c=3, **kwargs): #此时kwarfs就成为可变关键字参数
    print(a, b, c, kwargs)
# 此时a是普通参数, b,c是关键字参数, kwargs是关键字可变参数, 是字典类型 **kwargs是key=value格式

调用:
func(1) # 此时1给a了, b,c默认都是3
func(2, b=10) # 此时2给了, 关键字参数b=10了.


3.
def func(a,*args,**kwargs):
    print(a,args,kwargs)
# 此时a是普通变量, args可变参数, kwargs是关键字参数

调用:
如果我们有一个字典, 传入关键字参数时
我们需要拆包, 称为关键字参数的形式, 然后传入函数中
函数中再自动装包, 变成一个字典


"""
def func(**kwargs):
    print(kwargs)

func(a=1, b="hello", c="tom") # {'a': 1, 'b': 'hello', 'c': 'tom'}

# 如果在开发过程中, 已知一个字典
dict1 = {'a': 1, 'b': 'hello', 'c': 'tom'}
# 字典当作参数传入可变关键字参数:
func(**dict1) # {'a': 1, 'b': 'hello', 'c': 'tom'}


# 开发过程中可能遇到的函数
def bb(a, b, *c, **d):
    print(a, b, c, d)

# a,b是不可变参数, 是必须要有的, 而后面的可变参数是可以没有的, 默认就都为空
bb(1, 2)  # 1 2 () {}

bb(1, 2, 3, 4)  # 1 2 (3,4) {}

bb(1, 2, x=100, y=200)  # 1 2 () {'x':100,'y':200}

bb(1, 2, 3, x=100)  # 1 2 (3,) {'x':100}

# bb(1,2,x=100,1,3) # 报错, 顺序是不可以乱的

bb(1, 2, x=100, y=200, z=100)