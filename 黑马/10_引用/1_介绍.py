"""

了解引用:
    在python中, 值(数据, 变量)都是靠引用来传递的.
    引用就是地址值, 指针.
    可以通过 id(变量) 来查看变量的引用值, 也就是查看所指向的地址.
    我们可以通过id() 来判断两个变量是否为同一个值的引用.
    id()返回一个逻辑的内存地址值, 也就是十进制内存地址值

引用当作当作实参去传递.
    实参就是调用处, 传入的真实数据. 引用传递, 就是地址传递. 这样占用空间小, 并且速度快.





"""

# 可变和不可变数据类型

# 1. 不可变类型:
a = 1
b = a  # 其实是引用传递

print(a)  # 1
print(b)  # 1

print(id(a))  # 1935174297904 -> 内存的10进制值
print(id(b))  # 1935174297904
# 可见a和b都是指向同一个

# 修改a的值, 其实是a又指向了新的地址,
# 这次a指向了2 # 而b还指向了1. 因此a和b的id值不同
a = 2

print(a)  # 2
print(b)  # 1

print(id(a))  # 2087083206992s
print(id(b))  # 2087083206960
# 可见


# 可变类型:
# 列表
a_list = [10, 20]
b_list = a_list  # 也是通过引用的方式, 也就是地址传递, 去传递传递值的.

print(a_list)

print(id(a_list))  # 2328532132736
print(id(b_list))  # 2328532132736

# 修改a_list的数据
a_list.append(30)
print(a_list)  # [10, 20, 30]
print(b_list)  # [10, 20, 30]

print(id(a_list))  # 3170745688832
print(id(b_list))  # 3170745688832


# 可见, 仍然指向同一地址, 因为list是可变数据类型.
# 因此, 修改a_list, 就是在基础上, 直接修改的, 不需要额外改变地址.


print("====" * 20)


# 引用当作实参
# 定义函数:
# 有形参:
#   访问形参数据, 查看id, 以及更改后, 再查看数据和更改id
# 调用函数时:
# 将可变, 和不可变两种参数类型依次当作实参传入.
def test1(a: list) -> None:
    print(a)
    print(id(a))

    a += a

    print(a)
    print(id(a))



b = 100
test1(b)
# 100
# 2736118715856
# 200
# 2736118719120
# 因为是不可变类型, 因此前后id不同

b = [10, 20]
test1(b)
# [10, 20]
# 1716824891264
# [10, 20, 10, 20]
# 1716824891264
# 可见, list是可变数据类型, 因此前后id相同, 在原数据上修改.

print(b) # [10, 20, 10, 20]
# 可见, 因为是可变数据类型, 并且是引用(地址)传值, 所以修改后, b访问的也修改


