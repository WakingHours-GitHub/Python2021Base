# 字符的输出
# 使用print输出, 使用%s格式化字符串输出, 以及f"{}"输出
# 这几种写法一定一要多多练习

# 使用基本的print输出
print("HELL WORLD")
name = 'tom'
# 格式化字符串%s输出.
print("我的名字是%s" % name)  # 我的名字是tom

# f'{}'f字符串表示
print(f'my name is {name}')

# 字符串输入. 使用input(提示信息: str)
# 阻塞terminal, 从terminal输入, 使用input接收的变量均是字符串.

# 输入密码
# 使用变量接收
# passwd = input("please input your password: ")
# print(f'your passwd that you input is {passwd}')
# print(type(passwd)) # <class 'str'> # 从input接收的一个数据均是str类型.

# 下标, 也称之为索引.
# 数据在程序运行过程中, 存储在内存当中.
str1 = "abcdefg"
print(str1)

# 如何拿到字符串中特定位置的数据?
# 使用索引, index, 能够找到对应索引位置上数据.
# 索引从0开始. 使用[]索引
print(str1[0])  # a
print(str1[1])  # b

# 切片
# 切片是指对操作的对象截取其中一部分 的操作
# 字符串, 列表, 元组, 都支持切片操作.
# 语法:
# 序列[start: stop: step]
# 序列[开始索引: 结束索引: 步长]
# 注意:
# 1. 不包含结束位置下标对应的数据, 正负整数均可
# 2. 步长是选取间隔, 正负数均可, 默认步长为1.
# 即[, )区间, 包括前面, 不包括后面.

str1 = '0123456789'
print(str1[2:5:1])  # 234
# [2, 5), 包前, 不包后. 所以实际上是2~4. 步长为1

print(str1[2: 5: 2])  # 24
# 步长为2, 所以, 2~4, 从2数, 每两个输出.

print(str1[2: 5])  # 234, 步长默认为1.

# 省略开始索引, 表示从0索引开始, 默认从第一个数据开始.
print(str1[: 5])  # 01234

# 省略结束索引, 表示选取到最后, 并且包括最后一个数据.
print(str1[2:])  # 23456789

# 这种形式, 就是从0选到结束, 并且都包含.
print(str1[:])  # 0123456789

# 负数索引, 表示从最后索引开始
# 步长为负数, 表示倒叙选取, 从右到左.
print(str1[:: -1])  # 9876543210

# 从右往左数, 依次是-1, -2, ...
# 所以, 这里开始索引是-4, 结束索引是-1, 但是不包含-1, 因此是[-4, -2]
print(str1[-4: -1])  # 678
# 下标-1, 表示最后一个数据, 负索引, 也就是从左往右依次计数.

print(str1[-4: -1: 1]) # 678

# 翻译一下: step: -1, 表示从右到左选取,
# 但是开始:是-4, 结束是-1, 选取方向是从左到右;
# 所以无法选取到数据.
print(str1[-4: -1: -1]) # 空

# 这样方向就一致了. 因此这种选择方式是正确的.
print(str1[-1: -4: -1]) # 987























