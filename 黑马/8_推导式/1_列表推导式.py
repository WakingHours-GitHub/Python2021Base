"""
明确推导式
    列表推导式
    字典推导式
    集合推导式

推导式: 就是一种语法糖, 更有风格的一种python代码书写方式.
    使用推导式, 代码更加优雅, 展示技巧. python的语法糖.

列表推导式: (列表生成式)
    用一个表达式创建或者控制一个有规律的列表.
    什么叫有规律的列表:
        也就是列表中的数据是有规律的.
    语法:
        [表达式 for 元素 in 可迭代对象 if 语句]
        也就是只有满足if语句的可迭代对象中的元素, 和表达式拼接返回list对象
        表达式里面可以对元素进行操作. 并且返回最终的表达式结果.

多个for循环实现列表推导式
    实际上就是二级嵌套.

"""

# 例子: 创建一个0-10的列表.
# 循环。
list1 = []
i = 0
while i < 10:
    list1.append(i) # 追加整体.
    i += 1
print(list1) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# 方式2 : 容器转换。
list2 = list(range(10))
print(list2) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# 方式3: 列表推导式:
list3 = [i for i in range(10)]
print(list3) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


# 带if的列表推导式
# 创建0-10的偶数列表
list1 = [i for i in range(0, 10, 2)]
print(list1) # [0, 2, 4, 6, 8]

# 通过推导式 + if实现
list1 = [i for i in range(10) if i % 2 == 0]
print(list1) # [0, 2, 4, 6, 8]

# 创建列表: [(1,0, (1,1), (1,2), (2,0), (2,1), (2,2)]
# 数据1: 1, 2
# 数据2: 0, 1, 2
list1 = list()
for i in range(1, 3):
    for j in range(3):
        list1.append((i, j))
print(list1)




# 使用多重for列表推导式
list1 =  [(i, j) for i in range(1, 3) for j in range(3)]
print(list1) # [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]



# 列表推导式就是for循环的嵌套.












