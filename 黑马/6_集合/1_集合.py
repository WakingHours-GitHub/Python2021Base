"""
目标:
    创建集合
    集合数据的特点
    集合常见操作

集合的特点: 不允许重复出现重复的数据. 并且是无序的. 因此不支持索引.
    即: 无序, 不重复, 并且是可变数据类型.

创建集合:
    创建集合使用{}, 或者set(), 如果创建空集合只能使用set(), 因为{}用来创建空字典

集合常见操作:
    增加数据:
        set.add(数据): 增加单一数据

        set.update(数据): 追加的是序列.
    删除数据:
        set.remove(元素): 删除集合中的指定数据, 如何数据不存在则报错
        set.discard(元素): 删除集合中的指定元素, 如何数据不存在也不会报错
        set.pop(): 随机删除集合中的数据, 返回删除后的数据.

    查找数据:
        关键字: in, not in
        in: 判断数据在集合序列
        not in: 判断数据不在集合序列
"""

# 创建集合. 有数据的集合.
s1 = {10, 20, 30, 40, 50}
print(s1)  # {50, 20, 40, 10, 30} # 可见数据打印是没有顺序的

# 创建
s2 = {10, 20, 20, 40, 30, 10, 30}
print(s2) # {40, 10, 20, 30}
# 可见没有重复的数据, 说明集合有去重的功能.

# 创建空集合
s1 = {}  # 这种方式创建是字典.
print(type(s1)) #  <class 'dict'>
# 创建空集合正确的方式:
s3 = set()
print(s3) # set()
print(type(s3)) # <class 'set'>

s4 = set('abcdef')
print(s4) # {'c', 'b', 'f', 'e', 'd', 'a'} # 可见, 集合是无序的.


# 增加数据
# add(): 增加的是单一数据
s1 = {10, 20}
s1.add(100)
print(s1) # {100, 10, 20}
# 添加数据, 集合是没有顺序的.
s1.add(100)
print(s1) #  {100, 10, 20} # 集合有去重功能, 如果追加的数据是已有数据则什么都不做
# s1.add([10, 20, 30]) # TypeError: unhashable type: 'list'
# 使用add()追加元素, 如何是追加序列, 则会报错

# update(): 增加是可迭代对象 -> 序列
s2 = {10, 20}
s2.update([10, 20, 30, 40])
print(s2) # {40, 10, 20, 30}
# s2.update(100)  # TypeError: 'int' object is not iterable
# 仍然报错. int不是可迭代的

# 删除数据
s1 = {10, 20, 30, 40, 50}
# remove() # 删除指定数据, 如何数据不存在则报错
s1.remove(10)
print(s1) # {50, 20, 40, 30}

# s1.remove(10) # # KeyError: 10
# print(s1) #

# discard()删除数据, 如果数据不存在不报错
s1.discard(10)
print(s1) # {50, 20, 40, 30}

s1.discard(20)
print(s1) # {50, 40, 30}

# pop(): 随机删除, 并且返回这个数据
del_ele = s1.pop()
print(del_ele) # 50
print(s1) # {40, 30}



# 查找数据:
s1 = {10, 20, 30, 40, 50}
print(10 in s1) # True
print(10 not in s1) # False

print(11 not in s1) # True.

