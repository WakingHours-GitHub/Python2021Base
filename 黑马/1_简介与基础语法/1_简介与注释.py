"""
数据:
    硬盘 -> 内存 -> CPU处理

解释器: 解释器的作用就是解释代码, 运行文件.
Python解释器种类:
    CPython: c语言开发的解释器[官方], 应用最为广泛的解释器
    IPython: 基于CPython的一种, 交互式解释器
    其他解释器:
        PyPy: 基于Python语言开发的解释器
        ... 基于java平台的, 基于.Net平台的解释器

    安装官方的CPython解释器.
    如果电脑上有多个解释器, 想要区分, 那么就可以将python重命名, 改为python3
    这样在命令中就可以直接调用python3即可.

PyCharm: is a IDE (集成开发环境):
    内置非常多的功能. 帮助我们快速开发项目.

    这里我们使用community 版本.

    创建项目, 选择解释器. 文件名尽量不要使用中文名字.
    新建文件, 编写代码, 运行代码.

切换解释器: file -> settings -> 版本, 选择解释器, 进行切换.

项目管理:
    this windows: 该窗口, 覆盖当前项目
    New Windows: 新窗口,
    Attach: 也就是一个窗口, 打开两个项目.
    关闭项目: file: close project. 关闭项目

注释:
    注释的作用: 解释说明代码. 解释器不执行注释内容.
    注释的分类以及语法:
        单行注释和多行注释:
            单行注释: 只能注释一行内容 快捷键: ctrl+/
                # 注释内容
                跟着代码, 是两个空格再加上# 这符合python语法规范. 并且#和注释时间有空格.
            多行注释: 可以注释多行内容, 一般用于注释一段代码的情况
                有两种形式: 3对双引号, 或者3对单引号
                '''
                    注释内容
                '''
            在工作中, 单行注释是对一行代码说明的
            多行代码是对代码块说明的.









"""
# 单行注释
# 一个经典函数: 直接打印
print("Hello World") # 打印输出语句

print("hello Pyhon")
"""
多行注释
3对双引号
"""
'''
多行注释
3对单引号
'''
