"""

格式化输出:
    格式化符号
    f字符串

    格式化符号:
        %s      字符串
        %d      有符号 十进制 整数
        %f      浮点数
        %c      字符
        %u      无符号 十进制 整数
        %o      八进制 整数
        %x      十六进制 整数 (小写ox)
        %X      十六进制 整数 (大写ox)
        %e      科学计数法 (小写e)
        %E      科学计数法 (大写E)
        %g      %e和%f省略
    输出的本质上都是字符串, 因此%s,基本上可以输出任何数据类型, 再print之前, 都会调用一个类似于toString()的函数, 转换为str类型

    f字符串方式:
        f"{表达式}" 也可以输出格式化字符串.


格式化输出的三种方式总结:
    print("格式化字符串" % (...[变量]))
        如果只是格式化一个变量, 那么()可省略
    print("字符串{}".format(数据))
        print("字符串{索引}".format(数据))
    print(f"字符串{数据}")




"""

# 准备数据:
age = 18
name = "tom"
weight = 75.8
stu_id = 1

# 格式化输出整数
print('今年我的年龄是%d岁' % age)

# 格式化输出字符串 -> %s output: str
print('我的名字是%s' % name)

# 打印浮点数 -> %f
# %f默认是保留6位小数
# %m.nf 这就表示一共m位宽度, 然后保留n位小数
print('我的体重是%10.2f公斤' % weight)

# 整数对齐:
# %0md: 表示输出的整数为m宽度, 不足以0补全, 超出的原样输出.
# %md: 表示为m宽度, 不足以空格补全.
print('我的学号是%03d' % stu_id)  # 我的学号是0001
print("他的学号是%03d" % 123)
# 这样就实现了数据的对其.

# 格式化输出多个变量
# 多个变量格式化输出, 需要% (), 用','隔开, 按照顺序, 依次格式化输出
print('我的名字是%s, 今年%d岁了' % (name, age))
# 数字可以是表达式, 程序是从右往左执行的. 因此, 会先计算出表达式的值, 然后再格式化输出
print('明年是%d岁数' % (age + 1))

# 同时输出多个顺序,
print('我的名字是%s, 今年%d岁, 体重是%.2f, 学号是%03d' % (name, age, weight, stu_id))

# 使用f字符串方式进行格式化输出:
print(f'我的名字是{name}, 今年{age}岁')  # 比较高效的方式

# 使用"".format()方式进行格式化输出
print("我的名字是{}, 今年{}岁".format(name, age))











